from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from db_functions.users import add_user, get_user_by_telegram_id, update_user_data
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db_functions.products import get_all_products
from aiogram.types import WebAppInfo
from aiogram import F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import phonenumbers
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7820463854:AAH-2DDapeZzrKH-hTXGjzPTUgEvcXgnhcM"
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class RegistrationStates(StatesGroup):
    name = State()
    phone = State()
    email = State()
    address = State()

class UpdateStates(StatesGroup):
    name = State()
    phone = State()
    email = State()
    address = State()
    confirm = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
        [KeyboardButton(text="üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
    ],
    resize_keyboard=True
)


skip_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
    ],
    resize_keyboard=True
)

confirm_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def start_handler(message: Message):
    logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start")
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username

        logging.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}, username: {username}")
        user = get_user_by_telegram_id(telegram_id)

        if user:
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
                reply_markup=main_keyboard
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        else:
            add_user(telegram_id, username)
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –≤ –º–µ–Ω—é.",
                reply_markup=main_keyboard
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message(lambda message: message.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    user = get_user_by_telegram_id(telegram_id)

    if user:
        await message.answer(
            "‚ö† –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=main_keyboard
        )
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}.")
        return

    logging.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ name.")
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationStates.name)

@dp.message(RegistrationStates.name)
async def register_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return
    await state.update_data(name=name)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890):")
    await state.set_state(RegistrationStates.phone)

@dp.message(RegistrationStates.phone)
async def register_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    try:
        parsed_phone = phonenumbers.parse(phone, None)
        if not phonenumbers.is_valid_number(parsed_phone):
            raise ValueError("Invalid phone number")
    except:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890.")
        return
    await state.update_data(phone=phone)
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:")
    await state.set_state(RegistrationStates.email)

@dp.message(RegistrationStates.email)
async def register_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if "@" not in email or "." not in email:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
        return
    await state.update_data(email=email)
    await message.answer("üè† –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1):")
    await state.set_state(RegistrationStates.address)

@dp.message(RegistrationStates.address)
async def register_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if "," not in address or len(address.split(",")) < 2:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∞–¥—Ä–µ—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1).")
        return
    await state.update_data(address=address)
    user_data = await state.get_data()

    try:
        if add_user(
            telegram_id=message.from_user.id,
            username=user_data.get("name"),
            phone=user_data.get("phone"),
            email=user_data.get("email"),
            address=user_data.get("address"),
        ):
            await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!", reply_markup=main_keyboard)
        else:
            await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard)
    finally:
        await state.clear()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def update_data(message: types.Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return
    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=skip_keyboard)
    await state.set_state(UpdateStates.name)

@dp.message(UpdateStates.name)
async def update_name(message: types.Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(name=None)
    else:
        await state.update_data(name=message.text.strip())
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=skip_keyboard)
    await state.set_state(UpdateStates.phone)

@dp.message(UpdateStates.phone)
async def update_phone(message: types.Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(phone=None)
    else:
        phone = message.text.strip()
        try:
            parsed_phone = phonenumbers.parse(phone, None)
            if not phonenumbers.is_valid_number(parsed_phone):
                raise ValueError("Invalid phone number")
            await state.update_data(phone=phone)
        except:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890.")
            return
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=skip_keyboard)
    await state.set_state(UpdateStates.email)

@dp.message(UpdateStates.email)
async def update_email(message: types.Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(email=None)
    else:
        email = message.text.strip()
        if "@" not in email or "." not in email:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
            return
        await state.update_data(email=email)
    await message.answer("üè† –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª):", reply_markup=skip_keyboard)
    await state.set_state(UpdateStates.address)

@dp.message(UpdateStates.address)
async def update_address(message: types.Message, state: FSMContext):
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(address=None)
    else:
        address = message.text.strip()
        if "," not in address or len(address.split(",")) < 2:
            await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∞–¥—Ä–µ—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1).")
            return
        await state.update_data(address=address)
    user_data = await state.get_data()

    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        f"üë§ –ò–º—è: {user_data.get('name') or '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone') or '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n"
        f"‚úâÔ∏è –ü–æ—á—Ç–∞: {user_data.get('email') or '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n"
        f"üè† –ê–¥—Ä–µ—Å: {user_data.get('address') or '–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.",
        reply_markup=confirm_keyboard
    )
    await state.set_state(UpdateStates.confirm)

@dp.message(UpdateStates.confirm)
async def confirm_update(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        user_data = await state.get_data()
        try:
            success = update_user_data(
                telegram_id=message.from_user.id,
                username=user_data.get("name"),
                phone=user_data.get("phone"),
                email=user_data.get("email"),
                address=user_data.get("address"),
            )
            if success:
                await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=main_keyboard)
            else:
                await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard)
        finally:
            await state.clear()
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("üö´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await state.clear()
    else:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

        #–ü–æ–∫—É–ø–∫–∞
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
        @dp.message(lambda message: message.text == "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
        async def show_products(message: types.Message):
            web_app_url = "https://mellifluous-chaja-2ed306.netlify.app/"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="üõí –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=web_app_url))
            )
            await message.answer("üõçÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=keyboard)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
        @dp.message(lambda message: "web_app_data" in message.json)
        async def handle_web_app_data(message: types.Message):
            data = message.web_app_data.data  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
            await message.answer(f"–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {data}")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @dp.message()
        async def log_all_messages(message: types.Message):
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
        @dp.message(lambda message: message.text == "üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
        async def view_cart(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                cart = data.get("cart", [])
            if not cart:
                await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            products = get_all_products()
            cart_details = [prod for prod in products if str(prod["product_id"]) in cart]

            if not cart_details:
                await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
                return

            text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
            for product in cart_details:
                text += f"üîπ <b>{product['name']}</b>\n"
                text += f"–¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
                text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"

            await message.answer(text, parse_mode="HTML")





async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
